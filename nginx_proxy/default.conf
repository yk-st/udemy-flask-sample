# events {
#   worker_connections 2048;
#   multi_accept on;
#   use epoll;
# }
    
server {
    # HTTPを利用する設定
    listen       80;
    server_name  udemy-flask-sample.top;
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    charset UTF-8;

    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root         /usr/share/nginx/html;
    } 

    location / {
        # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
        return 301 https://udemy-flask-sample.top$request_uri;
    }

}

server {
    # HTTPを利用する設定
    listen       80;
    server_name  api.udemy-flask-sample.top;
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    charset UTF-8;

    # 証明書の更新のために、受け付ける
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root         /usr/share/nginx/html;
    } 

    location / {
        # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
        return 301 https://api.udemy-flask-sample.top$request_uri;
    }

}

# keycloak用証明書発行処理は停止する
#server {
#    # HTTPを利用する設定
#    listen       80;
#    server_name  auth.udemy-flask-sample.top;
#    access_log /var/log/nginx/access.log main;
#    error_log /var/log/nginx/error.log warn;
#
#    charset UTF-8;
#
#    # 証明書の更新のために、受け付ける
#    location ^~ /.well-known/acme-challenge/ {
#        default_type "text/plain";
#        root         /usr/share/nginx/html;
#    } 
#
#    location / {
#        # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
#        return 301 https://auth.udemy-flask-sample.top$request_uri/auth;
#    }
#
#}

server {
    # HTTPSを利用する設定
    listen       443 ssl http2;

    server_name  udemy-flask-sample.top;

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    ssl_session_timeout 1d;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_tickets off;

    keepalive_timeout     60;
    proxy_connect_timeout 60;
    proxy_read_timeout    60;
    proxy_send_timeout    60;

    charset UTF-8;

    # ゲストOS上の証明書とキー配置設定
    ssl_certificate      /etc/letsencrypt/live/udemy-flask-sample.top/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/udemy-flask-sample.top/privkey.pem;

    # oauth2 配下は全てoauthproxy2へ行くようにする
    location /oauth2/ {
        # oauthproxyへ飛ばす
        proxy_pass       http://172.16.0.11:4180;
        proxy_set_header Host                    $host;
        proxy_set_header X-Real-IP               $remote_addr;
        proxy_set_header X-Scheme                $scheme;
        proxy_set_header X-Auth-Request-Redirect $request_uri;
        # or, if you are handling multiple domains:
        # proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;
    }

    # プレリクエストの設定
    # 完全一致(=)で指定する
    location = /oauth2/auth {
        proxy_pass       http://172.16.0.11:4180;
        proxy_set_header Host             $host;
        proxy_set_header X-Real-IP        $remote_addr;
        proxy_set_header X-Scheme         $scheme;
        # nginx auth_request includes headers but not body
        proxy_set_header Content-Length   "";
        proxy_pass_request_body           off;
    }

    location / {

        # プレリクエストとして認証サーバーへ問い合わせを行う
        # nginxのカスタムモジュール
        auth_request /oauth2/auth;
        error_page 401 = /oauth2/sign_in;

        # landingページへのアクセスは認証をしなくてもOKとする
        #location = / {
        #    auth_request off;
        #    proxy_pass http://chmoney;
        #}

        # pass information via X-User and X-Email headers to backend,
        # requires running with --set-xauthrequest flag
        auth_request_set $user   $upstream_http_x_auth_request_user;
        auth_request_set $email  $upstream_http_x_auth_request_email;
        proxy_set_header X-User  $user;
        proxy_set_header X-Email $email;

        # if you enabled --pass-access-token, this will pass the token to the backend
        auth_request_set $token  $upstream_http_x_auth_request_access_token;
        proxy_set_header X-Access-Token $token;

        # if you enabled --cookie-refresh, this is needed for it to work with auth_request
        auth_request_set $auth_cookie $upstream_http_set_cookie;
        add_header Set-Cookie $auth_cookie;

        # When using the --set-authorization-header flag, some provider's cookies can exceed the 4kb
        # limit and so the OAuth2 Proxy splits these into multiple parts.
        # Nginx normally only copies the first `Set-Cookie` header from the auth_request to the response,
        # so if your cookies are larger than 4kb, you will need to extract additional cookies manually.
        auth_request_set $auth_cookie_name_upstream_1 $upstream_cookie_auth_cookie_name_1;

        # Extract the Cookie attributes from the first Set-Cookie header and append them
        # to the second part ($upstream_cookie_* variables only contain the raw cookie content)
        if ($auth_cookie ~* "(; .*)") {
            set $auth_cookie_name_0 $auth_cookie;
            set $auth_cookie_name_1 "auth_cookie_name_1=$auth_cookie_name_upstream_1$1";
        }

        # Send both Set-Cookie headers now if there was a second part
        if ($auth_cookie_name_upstream_1) {
            add_header Set-Cookie $auth_cookie_name_0;
            add_header Set-Cookie $auth_cookie_name_1;
        }

        #バッファサイズを設定する
        # pstream sent too big header while reading response header from upstream対策
        proxy_buffer_size          1024k;
        proxy_buffers            4 1024k;
        proxy_busy_buffers_size    1024k;


        proxy_pass http://chmoney;
    }

}

upstream chmoney {
    server 172.16.0.9:19689 weight=1;
}

server {

    # HTTPSを利用する設定
    listen       443 ssl http2;

    server_name  api.udemy-flask-sample.top;

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    ssl_session_timeout 1d;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_tickets off;

    keepalive_timeout     60;
    proxy_connect_timeout 60;
    proxy_read_timeout    60;
    proxy_send_timeout    60;

    charset UTF-8;

    # ゲストOS上の証明書とキー配置設定
    ssl_certificate      /etc/letsencrypt/live/api.udemy-flask-sample.top/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/api.udemy-flask-sample.top/privkey.pem;

    location / {

        #バッファサイズを設定する
        # pstream sent too big header while reading response header from upstream対策
        proxy_buffer_size          128k;
        proxy_buffers            4 256k;
        proxy_busy_buffers_size    256k;

        proxy_pass http://api_chmoney;
    }
}

upstream api_chmoney {
    server 172.16.0.9:19688 weight=1;
}

limit_req_zone $binary_remote_addr zone=zone1:100m rate=1r/s;
limit_req_status 429;